{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bishal\\\\Documents\\\\programming files\\\\To-do-list\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { data } from './dat.js';\nimport { FaCheck } from 'react-icons/fa';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [tasks, setTasks] = useState(data);\n  const [isempty, setIsempty] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (name) {\n      const task = {\n        id: new Date().getTime().toString(),\n        name\n      };\n      setIsempty(false);\n      setTasks(tasks => {\n        return [...tasks, task];\n      });\n      setName('');\n    } else {\n      setIsempty(true);\n      alert(\"Can't add empty task\");\n    }\n  };\n\n  const eliminateTasks = id => {\n    let newtasks = tasks.filter(tasks => tasks.id !== id);\n    setTasks(newtasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"To-do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), tasks.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [tasks.length, \" tasks to complete today\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hurray, you've completed all tasks for today\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 71\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: isempty ? 'red' : 'list-input',\n          value: name,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn1\",\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), tasks.map(tasks => {\n      const {\n        id,\n        name\n      } = tasks;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: () => eliminateTasks(id),\n            children: /*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 74\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: () => setTasks([]),\n      children: \"Completed all\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"OeaR5epytapo+wlo1aUB8+Jlf9g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Bishal/Documents/programming files/To-do-list/src/App.js"],"names":["React","useState","data","FaCheck","App","name","setName","tasks","setTasks","isempty","setIsempty","handleSubmit","e","preventDefault","task","id","Date","getTime","toString","alert","eliminateTasks","newtasks","filter","length","target","value","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { data } from './dat.js'\r\nimport { FaCheck } from 'react-icons/fa';\r\nimport './index.css';\r\nconst App = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [tasks, setTasks] = useState(data);\r\n  const [isempty, setIsempty] = useState(false);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name) {\r\n      const task = { id: new Date().getTime().toString(), name }\r\n      setIsempty(false)\r\n      setTasks((tasks) => {\r\n        return [...tasks, task]\r\n      })\r\n      setName('')\r\n    }\r\n\r\n    else {\r\n      setIsempty(true)\r\n      alert(\"Can't add empty task\")\r\n\r\n    }\r\n  }\r\n  const eliminateTasks = (id) => {\r\n    let newtasks = tasks.filter((tasks) => tasks.id !== id);\r\n    setTasks(newtasks);\r\n  }\r\n  return (\r\n    <section className=\"list\">\r\n      <h2>To-do List</h2>\r\n      {tasks.length ? <p>{tasks.length} tasks to complete today</p> : <p>Hurray, you've completed all tasks for today</p>}\r\n      <article>\r\n        <form className='form' onSubmit={handleSubmit}>\r\n          <input type='text' className={isempty ? 'red' : 'list-input'} value={name} onChange={(e) => setName(e.target.value)}></input>\r\n          <button type='submit' className='btn1'>Add Task</button>\r\n        </form>\r\n      </article>\r\n      {tasks.map((tasks) => {\r\n        const { id, name } = tasks;\r\n        return (\r\n          <>\r\n            <div key={id} className=\"item\">\r\n              <p>{name}</p>\r\n              <button className='btn' onClick={() => eliminateTasks(id)}><FaCheck /></button>\r\n            </div>\r\n          </>\r\n        )\r\n      })}\r\n      <button className='btn' onClick={() => setTasks([])}>Completed all</button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}